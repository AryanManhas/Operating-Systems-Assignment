#include <stdio.h>
#include <stdlib.h>

// Constants
#define MAX_BLOCKS 100

// Structure for a file
typedef struct {
    int startBlock;
    int size;
} File;

// Array to represent disk blocks
int disk[MAX_BLOCKS];

// Function prototypes
void contiguousAllocation();
void linkedAllocation();
void indexedAllocation();

int main() {
    int choice;

    printf("File Allocation Methods:\n");
    printf("1. Contiguous Allocation\n");
    printf("2. Linked Allocation\n");
    printf("3. Indexed Allocation\n");
    printf("Enter your choice (1-3): ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            contiguousAllocation();
            break;
        case 2:
            linkedAllocation();
            break;
        case 3:
            indexedAllocation();
            break;
        default:
            printf("Invalid choice. Exiting...\n");
            break;
    }

    return 0;
}

void contiguousAllocation() {
    int totalBlocks, numFiles;

    printf("Enter the total number of blocks on the disk: ");
    scanf("%d", &totalBlocks);

    printf("Enter the number of files: ");
    scanf("%d", &numFiles);

    if (numFiles > totalBlocks) {
        printf("Error: Number of files exceeds the total number of blocks. Exiting...\n");
        return;
    }

    File files[numFiles];

    // Initialize disk blocks
    for (int i = 0; i < totalBlocks; ++i) {
        disk[i] = 0; // 0 indicates the block is free
    }

    // Allocate contiguous blocks for each file
    for (int i = 0; i < numFiles; ++i) {
        printf("Enter the size of File %d: ", i + 1);
        scanf("%d", &files[i].size);

        // Check if the file size exceeds available space
        if (files[i].size > totalBlocks) {
            printf("Error: File %d size exceeds the total number of blocks. Skipping allocation for this file.\n", i + 1);
            continue;
        }

        // Find contiguous blocks for the file
        int start = -1;
        int count = 0;

        for (int j = 0; j < totalBlocks; ++j) {
            if (disk[j] == 0) {
                if (start == -1) {
                    start = j;
                }
                count++;
                if (count == files[i].size) {
                    break;
                }
            } else {
                start = -1;
                count = 0;
            }
        }

        // Update disk and file information
        if (start != -1) {
            files[i].startBlock = start;
            for (int j = start; j < start + files[i].size; ++j) {
                disk[j] = 1; // 1 indicates the block is allocated
            }
            printf("File %d allocated from block %d to %d.\n", i + 1, start, start + files[i].size - 1);
        } else {
            printf("File %d cannot be allocated contiguous blocks.\n", i + 1);
        }
    }
}

void linkedAllocation() {
    int totalBlocks, numFiles;

    printf("Enter the total number of blocks on the disk: ");
    scanf("%d", &totalBlocks);

    printf("Enter the number of files: ");
    scanf("%d", &numFiles);

    if (numFiles > totalBlocks) {
        printf("Error: Number of files exceeds the total number of blocks. Exiting...\n");
        return;
    }

    File files[numFiles];

    // Initialize disk blocks
    for (int i = 0; i < totalBlocks; ++i) {
        disk[i] = -1; // -1 indicates the block is free
    }

    // Allocate linked blocks for each file
    for (int i = 0; i < numFiles; ++i) {
        printf("Enter the size of File %d: ", i + 1);
        scanf("%d", &files[i].size);

        // Check if the file size exceeds available space
        if (files[i].size > totalBlocks) {
            printf("Error: File %d size exceeds the total number of blocks. Skipping allocation for this file.\n", i + 1);
            continue;
        }

        int start = -1;
        int prev = -1;

        // Find blocks for the file
        for (int j = 0; j < totalBlocks && files[i].size > 0; ++j) {
            if (disk[j] == -1) {
                disk[j] = 1; // 1 indicates the block is allocated
                files[i].size--;
                if (start == -1) {
                    start = j;
                }
                if (prev != -1) {
                    disk[prev] = j;
                }
                prev = j;
            }
        }

        // Update file information
        if (start != -1) {
            files[i].startBlock = start;
            disk[prev] = -1; // Set the last block's link to -1
            printf("File %d allocated with linked blocks starting from block %d.\n", i + 1, start);
        } else {
            printf("File %d cannot be allocated linked blocks.\n", i + 1);
        }
    }
}

void indexedAllocation() {
    int totalBlocks, numFiles, indexBlock;

    printf("Enter the total number of blocks on the disk: ");
    scanf("%d", &totalBlocks);

    printf("Enter the number of files: ");
    scanf("%d", &numFiles);

    printf("Enter the index block number: ");
    scanf("%d", &indexBlock);

    if (numFiles > totalBlocks) {
        printf("Error: Number of files exceeds the total number of blocks. Exiting...\n");
        return;
    }

    File files[numFiles];

    // Initialize disk blocks
    for (int i = 0; i < totalBlocks; ++i) {
        disk[i] = 0; // 0 indicates the block is free
    }

    // Initialize the index block
    int index[MAX_BLOCKS];
    for (int i = 0; i < MAX_BLOCKS; ++i) {
        index[i] = -1;
    }

    // Allocate indexed blocks for each file
    for (int i = 0; i < numFiles; ++i) {
        printf("Enter the size of File %d: ", i + 1);
        scanf("%d", &files[i].size);

        // Check if the file size exceeds available space
        if (files[i].size > totalBlocks) {
            printf("Error: File %d size exceeds the total number of blocks. Skipping allocation for this file.\n", i + 1);
            continue;
        }

        int start = -1;

        // Find blocks for the file
        for (int j = 0; j < totalBlocks && files[i].size > 0; ++j) {
            if (disk[j] == 0) {
                disk[j] = 1; // 1 indicates the block is allocated
                files[i].size--;
                if (start == -1) {
                    start = j;
                    index[i] = j;
                }
            }
        }

        // Update file information
        if (start != -1) {
            files[i].startBlock = start;
            printf("File %d allocated with indexed blocks starting from block %d.\n", i + 1, start);
        } else {
            printf("File %d cannot be allocated indexed blocks.\n", i + 1);
        }
    }

    // Display the index block
    printf("\nIndex Block Contents:\n");
    for (int i = 0; i < numFiles; ++i) {
        printf("File %d: Block %d\n", i + 1, index[i]);
    }
}
